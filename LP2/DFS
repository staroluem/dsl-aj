graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
def dfs_stack(graph, start):
    visited = set()
    stack = [start]

    while stack:
        node = stack.pop()
        
        if node not in visited:
            print(node, end=' ')
            visited.add(node)
            
            for neighbor in reversed(graph[node]):
                if neighbor not in visited:
                    stack.append(neighbor)

dfs_stack(graph, 'A')


from collections import deque
graph={
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

def que_bfs(graph,start):
    visited = set()
    queue=deque([start])
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node,end=' ')
            visited.add(node)
            for neigh in reversed(graph[node]):
                if neigh not in visited:
                    queue.append(neigh)

que_bfs(graph,'A')
