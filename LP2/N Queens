def solve_n_queens(n):
    board = [-1] * n
    solutions = []

    def is_safe(row, col):
        for r in range(row):
            c = board[r]
            if c == col or abs(c - col) == abs(r - row):
                return False
        return True

    def backtrack(row):
        if row == n:
            solutions.append(board[:])
            return
        for col in range(n):
            if is_safe(row, col):
                board[row] = col
                backtrack(row + 1)
    backtrack(0)
    return solutions

def print_solutions(solutions, n):
    for sol in solutions:
        for i in sol:
            print("." * i + "Q" + "." * (n - i - 1))
        print()
n = 4
solutions = solve_n_queens(n)
print(f"Found {len(solutions)} solutions:")
print_solutions(solutions, n)

















#N queens 
global N
N = 4

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j],end=" ")
        print()
        
def isSafe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
        
#upper diagonal 
    for i,j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
        
#lower diagonal
    for i,j in zip(range (row, N, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True 

def sucessful(board, col):
    if col >= N:
        return True
    
    for i in range (N):
        if isSafe (board, i, col):
            board[i][col] = 1
            
            if sucessful(board, col + 1) == True:
                return True
            
            board[i][col] = 0
    return False

def solveNQ():
    board = [ [0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0]
             ]
 
    if sucessful(board, 0) == False:
        print ("Solution does not exist")
        return False
 
    printSolution(board)
    return True
 
    
solveNQ()
 

