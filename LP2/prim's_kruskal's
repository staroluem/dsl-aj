#prims & kruskal's Algo

INF = 9999

v=5

g =[[0,1,0,2,0],
  [1,0,3,3,0],
  [0,3,0,2,0],
  [2,3,0,0,1],
  [0,0,2,1,0]]

selected = [0,0,0,0,0]

no_edge = 0
total_sum=0
selected[0]= True

print('Edge : Weight\n')

while (no_edge< v-1):
    minimum = INF
    x = 0
    y = 0
    for i in range(v):
        if selected[i]:
            for j in range(v):
                if (g[i][j] and not selected[j]):
                    if minimum > g[i][j]:
                        
                        minimum = g[i][j]
                        x = i
                        y = j
    
    print(str(x), '-', str(y), ':', str(g[x][y]))
    selected[y] = True
    no_edge +=1
    total_sum+=g[x][y]
print('\nTotal sum = ',total_sum)

#kruskal's
v = 5

edges = [
    (0, 1, 1),
    (0, 3, 2),
    (1, 2, 3),
    (1, 3, 3),
    (2, 3, 2),
    (3, 4, 1),
    (2, 4, 2),
]

edges = sorted(edges, key=lambda x: x[2])

def find(parent, node):
    if parent[node] == node:
        return node
    parent[node] = find(parent, parent[node])
    return parent[node]

def union(parent, rank, u, v):
    root_u = find(parent, u)
    root_v = find(parent, v)
    
    if rank[root_u] < rank[root_v]:
        parent[root_u] = root_v
    elif rank[root_u] > rank[root_v]:
        parent[root_v] = root_u
    else:
        parent[root_v] = root_u
        rank[root_u] += 1

parent = [i for i in range(v)]
rank = [0] * v

mst = []
total_weight = 0

for u, v, weight in edges:
    if find(parent, u) != find(parent, v):
        union(parent, rank, u, v)
        mst.append((u, v, weight))
        total_weight += weight

print("Edge : Weight")
for u, v, weight in mst:
    print(f"{u} - {v} : {weight}")

print("\nTotal weight of MST:", total_weight)

